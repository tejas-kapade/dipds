PRACTICAL NO.1
AIM: 2D Linear Convolution, Circular Convolution between two 2D Matrices.
CODE:
(1) Linear Convolution
CODE:
x=[1 2;3 4]
h=[5 6;7 8]
y=conv2(x,h);
disp("Linear convolution is y(m,n)",y);
OUTPUT:
(2) Circular Convolution
CODE:
x=[1 2; 3 4]
h=[5 6; 7 8]
X=fft2(x)
H=fft2(h)
y=X.*H
Y=ifft(y)
disp(Y)
OUTPUT:
CONCLUSION: We have successfully performed 2D Linear Convolution, Circular Convolution using
Scilab.



PRACTICAL NO.2
AIM: Circular Convolution expressed as linear convolution plus alias.
CODE:
x=[1 2;3 4]
h=[5 6;7 8]
y=conv2(x,h);
disp("Linear convolution is y(m,n)",y);
y1=[y(:,1)+y(:,$),y(:,2)];
y2=[y1(1,:)+y1($,:);y1(2,:)];
disp("Circular convolution is y(m,n)",y2);
OUTPUT:
CONCLUSION: We have successfully performed Circular Convolution using Scilab.


PRACTICAL NO.3
AIM: Linear correlation of a 2D matrix, Circular correlation between two signals and Linear auto
correlation of a 2D matrix.
1 1. Linear correlation of a 2D matrix
Code:
clc;
x1=[31;24]
x2=[15;23]
n=x2(:,$:-1:1)
m=n($:-1:1,:)
disp(n);
disp(m);
y=conv2(x1,m);
disp("Linear correlation is y(m,n)",y);

CONCLUSION: We have successfully performed Linear correlation using Scilab.
2. Circular correlation between two signals.
CODE:
clc;
x1=[15;24];
x2=[32;41];
h=x2(:,$:-1:1);//left to right direction
h1=h($:-1:1,:);//up to down direction
x=fft(x1);
h2=fft(h1);
y=ifft(x.*h2);
disp(y,circularcorrelation);//circular correlation
OUTPUT:

CONCLUSION: We have successfully performed Circular correlation using Scilab.
3. Linear Auto correlation of a 2D matrix.
CODE:
x1=[32;15];
x2=x1(:,$:-1:1);//left to right direction
h=x2($:-1:1,:);//up to down direction
y=conv2(x1,h);
disp(y,"linear auto correlation");//linear auto correlation
OUTPUT:
CONCLUSION: We have successfully performed linear auto correlation using Scilab.
PRACTICAL NO.4
AIM: Compute 2D DFT of 4*4 Grayscale image.
CODE:
f=[1 1 1 1;1 1 1 1;1 1 1 1;1 1 1 1];
N=4;
kernel=fft(N);
F=kernel*(f*kernel ');
F1=ifft(F);
disp(F1);
subplot(221);
imshow(f);
title('Original image');
subplot(222);
imshow(F1);
title('After DFT image');
OUTPUT:

2) Compute the inverse of 2D DFT of the transform coefficient given by
CODE:
f=[16 0 0 0;0 0 0 0;0 0 0 0;0 0 0 0];
N=4;
kernel=fft(N);
f=kernel*(f*kernel')/N^2
F1=ifft(f);
disp(F1);
OUTPUT:
CONCLUSION: We have successfully implemented DFT on 4*4 grayscale matrix using Scilab


PRACTICAL NO.5
AIM: Compute discrete cosine transform, Program to perform KL Transform for the given 2D
matrix.
1.Compute discrete cosine transform
i (i) Compute the discrete cosine transform (DCT) matrix for N=4
CODE:
clc;
N=input('Enter the length of DCT matrix');
const=sqrt(2/N);
for k=0:1:N-1
for l=0:1:N-1
if k==0 then
c(k+1,l+1)=sqrt(1/N);
else
c(k+1,l+1)=const*cos(((2*l+1)*%pi*k)/(2*N));
end
end

end
disp(c);
OUTPUT: DCT matrix of order four
i (ii) Computation of the DCT of a given matrix (sequence).
CODE:
clc;
f=[2 4 4 2;4 6 8 3;2 8 10 4;3 8 6 2];
[M N]=size(f);
const=sqrt(2/N);
for k=0:1:N-1
for l=0:1:N-1
if k==0
c(k+1,l+1)=1/sqrt(N);
else
a=2*l;
c(k+1,l+1)=const*cos((%pi*k*(a+1))/(2*N)); end
end
end
f1=c*f;
disp(f1);
F=c*f*c ';
disp(c,'Discrete Cosine Transform');
disp(F,'Discrete Cosine Transform of f(m,n) is');
subplot(221);imshow(f);title('Image in spatial domain')
subplot(223);imshow(F);title('Image in frequency domain')
Another code for same program using DCT() function
clc;
f=[2 4 4 2;4 6 8 3;2 8 10 4;3 8 6 2];
F=dct(f);
disp(F);

subplot(221);imshow(f);title('Image in spatial domain')
subplot(223);imshow(F);title('Image in frequency domain')
OUTPUT:
Using DCT function

Program to perform KL transform for the given 2D matrix.
Code:
clc;
//X=[4 3 5 6;4 2 7 7;5 5 6 7];
X=input('Enter the matrix');
[m,n]=size(X);
A=0;
E=0;
for i=1:n
A=A+X(:,i);
E=E+X(:,i)*X(:,i)';
end
mx=A/n;
E=E/n;

C=E-mx*mx';
[V,D]=spec(C);
d=diag(D);
[d,i]=gsort(d);
for j=1:length(d)
T(:,j)=V(:,i(j));
end
T=T'
disp(d,'Eigen values are U=')
disp(T,'The Eigen vector matrix T=')
disp(T,'The KL transform basis is =')
for i=1:n
Y(:,i)=T*X(:,i);
end
disp(Y,'KL transformation of the input matrix Y=');
for i=1:n
x(:,i)=T' *Y(:,i);
end
disp(x,'Reconstruct matrix of the given sample matrix X= ')
Output:

CONCLUSION: We have successfully implemented Compute discrete cosine transform & KL
Transform for given 2D transform using Scilab.
PRACTICAL NO. 6
AIM: i) Brightness Enhancement of image
ii) Contrast Manipulation
iii) Image Negative
CODE:
clc;
k=input('Enter the constant value')
x=imread(fullpath(getIPCVpath()+"images/peppers.png"));
a=rgb2gray(x);
g=double(a)+k;//Increasing the brightness of the image by constant k
g1=uint8(g);
d=double(a)-k;
d1=uint8(d);

figure(1);
imshow(a);
title('original image')
figure(2);
imshow(g1);
title('image after increasing brightness')
figure(3);
imshow(d1);
title('image after decreasing brightness')
Output:
Code: Contrast Manipulation
Take k<1 for increasing contrast:
Take k>1 for decreasing contrast:
clc;
k=input('Enter the constant value k')
x=imread(fullpath(getIPCVpath()+"images/peppers.png"));
a=(x);
g=double(a)*k;//Increasing the contrast of the image by constant k
g1=uint8(g);
figure(1);
imshow(a);
title('original image')
figure(2);
imshow(g1);
title('image after increasing contrast')
Output:

Code: Image Negative:
clc;
x=imread(fullpath(getIPCVpath()+"images/checkerbox.png"));
a=(x);
g=255-double(a);//Increasing the contrast of the image by constant k
g1=uint8(g);
figure(1);
imshow(a);
title('original image')
figure(2);
imshow(g1);

title('image after inverse transformation')
Output:
Conclusion: We have successfully studied brightness enhancement, contrast manipulation and reverse
transformation of an image.







